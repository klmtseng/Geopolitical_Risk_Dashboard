name: Daily ETL, Build, and Deploy

on:
  schedule:
    - cron: '30 0 * * *' # 00:30 UTC daily (8:30 AM Taipei time)
  workflow_dispatch: # Allows manual triggering

env:
  ACLED_TOKEN: ${{ secrets.ACLED_TOKEN }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  TZ: Asia/Taipei # Sets timezone for the entire job

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # To commit data and push
      pages: write         # To deploy to GitHub Pages
      id-token: write      # For GitHub Pages OIDC token
      issues: write        # To create issues on failure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Or your project's Python version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run ETL script
        run: python etl.py
        # ACLED_TOKEN and OPENAI_API_KEY are available from job env

      - name: Commit data changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions-bot@github.com'
          # Add the frontend data file and the archival data files
          git add static/data/latest.json
          git add data/*.json
          # Check if there are changes to commit to avoid error if no data changed
          if ! git diff --staged --quiet; then
            git commit -m "Update data: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git push
          else
            echo "No data changes to commit."
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your project's Node.js LTS version
          cache: 'npm'

      - name: Install Node.js dependencies
        # Using npm ci for cleaner installs if package-lock.json is present and up-to-date
        # If you don't commit package-lock.json, use `npm install`
        run: npm ci

      - name: Build frontend application
        # This command should build your SvelteKit app for static hosting.
        # Ensure your svelte.config.js uses adapter-static.
        # The output is typically in a 'build' directory by default with adapter-static.
        run: npm run build
        # Ensure OPENAI_API_KEY is available if your build process needs it (e.g. for prerendering)
        # However, for this project, data is fetched by Python, and frontend just displays it.

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3 # Use v3 or latest
        with:
          # Path to the directory to upload. SvelteKit with adapter-static usually outputs to 'build'.
          # Verify this path in your svelte.config.js or vite.config.js.
          path: ./build

      - name: Deploy to GitHub Pages
        id: deployment # Give the deployment step an id
        uses: actions/deploy-pages@v4 # Use v4 or latest
        # This action automatically uses the artifact uploaded in the previous step.

      - name: Notify on failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # gh cli needs this
        run: |
          echo "Workflow failed. Creating an issue."
          # Ensure gh CLI is installed and configured if using this directly.
          # Ubuntu latest runners usually have gh pre-installed.
          gh issue create --title "Daily Build Failed on $(date -u +'%Y-%m-%d')" --body "The daily build workflow failed. Please check the logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" --label "bug,workflow-failure"
          # Fallback echo if gh cli fails for some reason
          echo "Issue creation attempted. See workflow logs for details."
          # Consider using a dedicated action for issue creation for more robustness if gh cli setup is an issue.
          # e.g. JasonEtco/create-an-issue@v2 or similar.
